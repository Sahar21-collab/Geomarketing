<!-- Exercise 1: Basic Map -->
<!DOCTYPE html>
<html>
<head>
  <title>Geomarketing Exercises</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
</head>
<body>
  <h2>Exercise 1: Display a Basic Map</h2>
  <div id="map1" style="height: 400px;"></div>
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    var map1 = L.map('map1').setView([48.8566, 2.3522], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map1);
  </script>


/////////////////////////////////////////////////////

<!DOCTYPE html>
<html>
<head>
  <title>Exercise 2: Map Centered on Lyon</title>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map2 {
      height: 400px;
    }
  </style>
</head>
<body>
  <h2>Exercise 2: Change the Map Center to Lyon</h2>
  <div id="map2"></div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script>
    var map2 = L.map('map2').setView([45.75, 4.85], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map2);
  </script>
</body>
</html>


/////////////////////////////////////////

<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Exercise 5: Load Markers from CSV</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map {
      height: 400px;
      margin: 20px 0;
    }
    textarea {
      width: 100%;
      height: 180px;
    }
  </style>
</head>
<body>
  <h2>Exercise 5: Load Store Data from CSV</h2>
  <p>Paste CSV data in this format: <code>latitude,longitude,store_name,type,monthly_sales</code></p>

  <textarea id="csvInput">latitude,longitude,store_name,type,monthly_sales
48.8566,2.3522,Paris Central,Clothing,75000
45.7640,4.8357,Lyon Bellecour,Electronics,62000
43.6108,3.8767,Montpellier Mall,Grocery,58000
44.8378,-0.5792,Bordeaux Downtown,Furniture,54000
43.2965,5.3698,Marseille Vieux-Port,Grocery,70000
48.5734,7.7521,Strasbourg Nord,Clothing,46000
47.2184,-1.5536,Nantes Centre,Electronics,51000
50.6292,3.0573,Lille Grand Place,Furniture,53000
49.2583,4.0317,Reims Est,Clothing,39000
45.1885,5.7245,Grenoble Sud,Grocery,42000</textarea>

  <br>
  <button onclick="loadCSV()">Load Markers from CSV</button>

  <div id="map"></div>

  <!-- JS Libraries -->
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://unpkg.com/papaparse@5.3.2/papaparse.min.js"></script>
  <script>
    const map = L.map('map').setView([46.5, 2.5], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    function loadCSV() {
      const csvData = document.getElementById("csvInput").value;

      Papa.parse(csvData, {
        header: true,
        skipEmptyLines: true,
        complete: function(results) {
          console.log('Parsed rows:', results.data);
          results.data.forEach(row => {
            const lat = parseFloat(row.latitude);
            const lng = parseFloat(row.longitude);
            const name = row.store_name;
            const type = row.type;
            const sales = row.monthly_sales;

            if (!isNaN(lat) && !isNaN(lng)) {
              L.marker([lat, lng]).addTo(map).bindPopup(
                `<strong>${name}</strong><br>Type: ${type}<br>Monthly Sales: €${sales}`
              );
            }
          });
        }
      });
    }
  </script>
</body>
</html>


////////////////////// start exe 11  ///

|||||||||| JS part


// Sample dataset (CSV-like)
const storeData = [
  { name: "Paris North", lat: 48.88, lon: 2.35 },
  { name: "Paris Central", lat: 48.86, lon: 2.34 },
  { name: "Paris East", lat: 48.86, lon: 2.39 },
  { name: "Lyon Central", lat: 45.76, lon: 4.84 },
  { name: "Lyon East", lat: 45.75, lon: 4.86 },
  { name: "Marseille", lat: 43.30, lon: 5.37 },
  { name: "Nice", lat: 43.70, lon: 7.26 },
];

const map = L.map('map').setView([46.5, 2.5], 6);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
}).addTo(map);

// Convert to GeoJSON points
const storePoints = storeData.map(store => turf.point([store.lon, store.lat], { name: store.name }));

// Loop through all pairs and detect overlap
const overlapPairs = [];

for (let i = 0; i < storePoints.length; i++) {
  for (let j = i + 1; j < storePoints.length; j++) {
    const dist = turf.distance(storePoints[i], storePoints[j], { units: 'kilometers' });
    if (dist <= 5) {
      overlapPairs.push([storePoints[i].properties.name, storePoints[j].properties.name, dist.toFixed(2)]);
    }
  }
}

// Show results on map
storeData.forEach(store => {
  L.circleMarker([store.lat, store.lon], {
    radius: 8,
    color: 'blue',
    fillOpacity: 0.6
  }).addTo(map).bindPopup(`<b>${store.name}</b>`);
});

// Draw lines between overlapping stores
overlapPairs.forEach(pair => {
  const store1 = storeData.find(s => s.name === pair[0]);
  const store2 = storeData.find(s => s.name === pair[1]);

  L.polyline([[store1.lat, store1.lon], [store2.lat, store2.lon]], {
    color: 'red',
    weight: 2,
    dashArray: '5, 5'
  }).addTo(map).bindPopup(`Overlap: ${pair[0]} ↔ ${pair[1]}<br>${pair[2]} km`);
});

console.log("Overlapping pairs (within 5km):", overlapPairs);
|||||||||||||||||||||
HTML part

<h2>Exercise 11: Store Coverage Overlap</h2>
<p>Shows overlapping stores within 5km radius (potential cannibalization)</p>

<div id="map"></div>

<style>
  #map { height: 500px; }
</style>
||||||||||||||||||||||||


//////end exe 11 //////



/////////////////////////////////////////////////// Where NOT to Open New Stores ////////////////////////////////////////////////////////


Setting 
https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js
https://unpkg.com/papaparse@5.3.2/papaparse.min.js
https://unpkg.com/leaflet/dist/leaflet.js

https://unpkg.com/leaflet/dist/leaflet.css



<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>Where NOT to Open New Stores</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    #map {
      height: 500px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h2>Exercise: Where NOT to Open New Stores</h2>
  <p><strong>Goal:</strong> Identify cities where opening a new store is not recommended due to store density or low population coverage.</p>
  <div id="map"></div>

  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>
  <script>
    const storeLocations = [
      { name: "Paris Central", lat: 48.8566, lon: 2.3522 },
      { name: "Paris North", lat: 48.88, lon: 2.35 },
      { name: "Paris South", lat: 48.86, lon: 2.34 },
      { name: "Lyon Center", lat: 45.76, lon: 4.84 },
      { name: "Lyon East", lat: 45.75, lon: 4.86 },
      { name: "Montpellier", lat: 43.6, lon: 3.88 },
      { name: "Nice", lat: 43.7, lon: 7.26 }
    ];

    const cities = [
      { name: "Paris", lat: 48.8566, lon: 2.3522, population: 2200000 },
      { name: "Lyon", lat: 45.75, lon: 4.85, population: 515000 },
      { name: "Marseille", lat: 43.3, lon: 5.37, population: 870000 },
      { name: "Bordeaux", lat: 44.84, lon: -0.57, population: 250000 },
      { name: "Nice", lat: 43.7, lon: 7.26, population: 340000 },
      { name: "Toulouse", lat: 43.6, lon: 1.44, population: 480000 },
      { name: "Nantes", lat: 47.22, lon: -1.55, population: 310000 }
    ];

    const map = L.map('map').setView([46.5, 2.5], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Draw store markers and 5km radius
    storeLocations.forEach(store => {
      const marker = L.circleMarker([store.lat, store.lon], {
        radius: 6,
        color: 'blue',
        fillOpacity: 0.6
      }).addTo(map).bindPopup(`<strong>${store.name}</strong>`);

      L.circle([store.lat, store.lon], {
        radius: 5000,
        color: 'blue',
        fillOpacity: 0.1
      }).addTo(map);
    });

    // Analyze cities for store proximity
    cities.forEach(city => {
      const cityPoint = turf.point([city.lon, city.lat]);
      const nearbyStores = storeLocations.filter(store => {
        const storePoint = turf.point([store.lon, store.lat]);
        const dist = turf.distance(cityPoint, storePoint, { units: 'kilometers' });
        return dist <= 5;
      });

      const markerColor = (nearbyStores.length >= 2 || city.population < 400000) ? 'red' : 'green';
      const message = `<strong>${city.name}</strong><br>Population: ${city.population}<br>Nearby stores: ${nearbyStores.length}<br><strong>${markerColor === 'red' ? 'Not recommended' : 'Safe to expand'}</strong>`;

      L.circleMarker([city.lat, city.lon], {
        radius: 8,
        color: markerColor,
        fillOpacity: 0.5
      }).addTo(map).bindPopup(message);
    });
  </script>
</body>
</html>


////////////////////////////////////////////// Where NOT to Open New Stores (advance) ///////////////////////



setting 

https://unpkg.com/leaflet/dist/leaflet.js
https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js
https://unpkg.com/leaflet/dist/leaflet.js


<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Advanced GeoMarketing: Where NOT to Open Stores</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <!-- Leaflet CSS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 10px;
    }
    #map {
      height: 600px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <h2>Advanced GeoMarketing: Where NOT to Open Stores</h2>
  <p>This map analyzes store proximity, performance, competitors, and demographics.</p>
  <div id="map"></div>

  <!-- Leaflet and Turf.js libraries -->
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>

  <script>
    const yourStores = [
      { name: "Paris Central", lat: 48.8566, lon: 2.3522, sales: 72000 },
      { name: "Paris North", lat: 48.88, lon: 2.35, sales: 68000 },
      { name: "Lyon Center", lat: 45.76, lon: 4.84, sales: 75000 },
      { name: "Lyon East", lat: 45.75, lon: 4.86, sales: 41000 },
      { name: "Nice", lat: 43.7, lon: 7.26, sales: 30000 }
    ];

    const competitors = [
      { name: "Z-Store Paris East", lat: 48.865, lon: 2.36 },
      { name: "Y-Mart Lyon South", lat: 45.74, lon: 4.83 },
      { name: "QuickMart Nice", lat: 43.705, lon: 7.265 }
    ];

    const cities = [
      { name: "Paris", lat: 48.8566, lon: 2.3522, population: 2200000, income: 3000 },
      { name: "Lyon", lat: 45.75, lon: 4.85, population: 515000, income: 2800 },
      { name: "Nice", lat: 43.7, lon: 7.26, population: 340000, income: 2600 },
      { name: "Toulouse", lat: 43.6, lon: 1.44, population: 480000, income: 2700 },
      { name: "Bordeaux", lat: 44.84, lon: -0.57, population: 250000, income: 2900 }
    ];

    const map = L.map('map').setView([46.5, 2.5], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Show your stores
    yourStores.forEach(store => {
      const color = store.sales < 50000 ? 'orange' : 'blue';

      // Add main marker with popup
      L.circleMarker([store.lat, store.lon], {
        radius: 6,
        color,
        fillOpacity: 0.8
      }).addTo(map).bindPopup(`<strong>${store.name}</strong><br>Sales: €${store.sales}`);

      // Add transparent influence circle, but disable interaction
      L.circle([store.lat, store.lon], {
        radius: 5000,
        color,
        fillOpacity: 0.1,
        interactive: false // <- key fix!
      }).addTo(map);
    });

    // Show competitors
    competitors.forEach(comp => {
      L.circleMarker([comp.lat, comp.lon], {
        radius: 6,
        color: 'red',
        fillOpacity: 0.7
      }).addTo(map).bindPopup(`<strong>Competitor:</strong> ${comp.name}`);
    });

    // Evaluate cities
    cities.forEach(city => {
      const cityPoint = turf.point([city.lon, city.lat]);

      const nearbyOwn = yourStores.filter(store =>
        turf.distance(cityPoint, turf.point([store.lon, store.lat]), { units: 'kilometers' }) <= 5
      );

      const hasBadStore = nearbyOwn.some(s => s.sales < 50000);

      const nearbyCompetitors = competitors.filter(comp =>
        turf.distance(cityPoint, turf.point([comp.lon, comp.lat]), { units: 'kilometers' }) <= 5
      );

      const lowPopOrIncome = city.population < 300000 || city.income < 2700;
      const overlap = nearbyOwn.length >= 1 || nearbyCompetitors.length >= 1;
      const notRecommended = hasBadStore || overlap || lowPopOrIncome;

      const color = notRecommended ? 'red' : 'green';
      const label = notRecommended ? '🚫 Not Recommended' : '✅ Safe to Consider';

      L.circleMarker([city.lat, city.lon], {
        radius: 8,
        color,
        fillOpacity: 0.6
      }).addTo(map).bindPopup(
        `<strong>${city.name}</strong><br>` +
        `Population: ${city.population}<br>` +
        `Income: €${city.income}<br>` +
        `Nearby stores: ${nearbyOwn.length}<br>` +
        `Competitors: ${nearbyCompetitors.length}<br>` +
        `Underperforming store nearby: ${hasBadStore ? 'Yes' : 'No'}<br><strong>${label}</strong>`
      );
    });
  </script>
</body>
</html>



////////////////////////////// Where to Open Your Next Store? /////////////////////////////

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>GeoMarketing Strategy Map</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link
    rel="stylesheet"
    href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
  />
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 10px;
    }
    #map {
      height: 600px;
      margin-top: 15px;
    }
  </style>
</head>
<body>
  <h2>📍 GeoMarketing Strategy Map</h2>
  <p><strong>Task:</strong> Analyze where to open two new stores based on demographics, proximity, and performance.</p>
  <div id="map"></div>

  <!-- Leaflet & Turf.js -->
  <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@turf/turf@6/turf.min.js"></script>

  <script>
    // ==== Dataset: Your stores ====
    const yourStores = [
      { name: "Paris Central", lat: 48.8566, lon: 2.3522, sales: 72000 },
      { name: "Lyon East", lat: 45.75, lon: 4.86, sales: 41000 },
      { name: "Nice", lat: 43.7, lon: 7.26, sales: 30000 }
    ];

    // ==== Competitor stores ====
    const competitors = [
      { name: "Z-Store Paris East", lat: 48.865, lon: 2.36 },
      { name: "Y-Mart Lyon South", lat: 45.74, lon: 4.83 },
      { name: "QuickMart Nice", lat: 43.705, lon: 7.265 }
    ];

    // ==== Cities (demographics) ====
    const cities = [
      { name: "Paris", lat: 48.8566, lon: 2.3522, population: 2200000, income: 3000 },
      { name: "Lyon", lat: 45.75, lon: 4.85, population: 515000, income: 2800 },
      { name: "Nice", lat: 43.7, lon: 7.26, population: 340000, income: 2600 },
      { name: "Toulouse", lat: 43.6, lon: 1.44, population: 480000, income: 2700 },
      { name: "Bordeaux", lat: 44.84, lon: -0.57, population: 250000, income: 2900 },
      { name: "Nantes", lat: 47.22, lon: -1.55, population: 320000, income: 2800 }
    ];

    // ==== Init Map ====
    const map = L.map('map').setView([46.5, 2.5], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // ==== Show Your Stores ====
    yourStores.forEach(store => {
      const color = store.sales < 50000 ? 'orange' : 'blue';

      L.circleMarker([store.lat, store.lon], {
        radius: 6,
        color,
        fillOpacity: 0.8
      }).addTo(map).bindPopup(`<strong>${store.name}</strong><br>Sales: €${store.sales}`);

      // Influence area
      L.circle([store.lat, store.lon], {
        radius: 5000,
        color,
        fillOpacity: 0.1,
        interactive: false
      }).addTo(map);
    });

    // ==== Show Competitors ====
    competitors.forEach(comp => {
      L.circleMarker([comp.lat, comp.lon], {
        radius: 6,
        color: 'red',
        fillOpacity: 0.7
      }).addTo(map).bindPopup(`<strong>Competitor:</strong> ${comp.name}`);
    });

    // ==== Show Cities and Evaluate ====
    cities.forEach(city => {
      const cityPoint = turf.point([city.lon, city.lat]);

      const nearbyOwn = yourStores.filter(store =>
        turf.distance(cityPoint, turf.point([store.lon, store.lat]), { units: 'kilometers' }) <= 5
      

      );

      const hasBadStore = nearbyOwn.some(s => s.sales < 50000);

      const nearbyCompetitors = competitors.filter(comp =>
        turf.distance(cityPoint, turf.point([comp.lon, comp.lat]), { units: 'kilometers' }) <= 5
      );

      const lowPopOrIncome = city.population < 300000 || city.income < 2700;
      const overlap = nearbyOwn.length >= 1 || nearbyCompetitors.length >= 1;
      const notRecommended = hasBadStore || overlap || lowPopOrIncome;

      const color = notRecommended ? 'red' : 'green';
      const label = notRecommended ? '🚫 Not Recommended' : '✅ Safe to Consider';

      L.circleMarker([city.lat, city.lon], {
        radius: 8,
        color,
        fillOpacity: 0.6
      }).addTo(map).bindPopup(
        `<strong>${city.name}</strong><br>` +
        `Population: ${city.population}<br>` +
        `Income: €${city.income}<br>` +
        `Nearby stores: ${nearbyOwn.length}<br>` +
        `Competitors: ${nearbyCompetitors.length}<br>` +
        `Underperforming store nearby: ${hasBadStore ? 'Yes' : 'No'}<br><strong>${label}</strong>`
      );
    });

    // === TODO: Add student logic to choose cities and justify selection ===
  </script>
</body>
</html>




